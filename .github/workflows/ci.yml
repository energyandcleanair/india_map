name: Workflow

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
    inputs:
      force:
        description: "Force deploy"
        type: "boolean"
        required: false
        default: false

env:
  PYTHON_VERSION: 3.12
  POETRY_VERSION: 2.1.3
  PROJECT_SUBDIR: src/pm25ml
  DEVELOP_DEPENDENCY_GROUPS: main,dev
  PRODUCTION_DEPENDENCY_GROUPS: main
  GOOGLE_SERVICE_ACCOUNT_NAME: crea-india-map-github-actions@vital-form-455413-p8.iam.gserviceaccount.com
  ORCHESTRATOR_SERVICE_ACCOUNT_NAME: pm25ml-orchestrator@vital-form-455413-p8.iam.gserviceaccount.com
  GCP_PROJECT: vital-form-455413-p8
  WORKFLOW_IDENTITY_PROVIDER: 'projects/716476042137/locations/global/workloadIdentityPools/github-wif-pool/providers/crea-org-actions-provider'
  DOCKER_REGISTRY_ROOT: europe-west1-docker.pkg.dev
  IMAGE_TAG_BASE: europe-west1-docker.pkg.dev/vital-form-455413-p8/pm25ml/pm25ml

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  deps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache poetry install
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ env.POETRY_VERSION }}-${{ env.PYTHON_VERSION }}

      - uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: .venv
          key: pydeps-${{ env.PYTHON_VERSION }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --only ${{ env.DEVELOP_DEPENDENCY_GROUPS }}
        if: steps.cache-deps.outputs.cache-hit != 'true'

  install-package:
    runs-on: ubuntu-latest
    needs: [deps]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: ./.github/poetry-cache-restore
      - name: Install package
        run: poetry install --no-interaction --only ${{ env.PRODUCTION_DEPENDENCY_GROUPS }}

  test:
    runs-on: ubuntu-latest
    needs: [deps]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: ./.github/poetry-cache-restore
      - name: Run tests
        run: poetry run pytest -m "not integration"
  
  integration-test:
    runs-on: ubuntu-latest
    needs: [deps]
    env:
      IT_GEE_ASSET_ROOT: projects/vital-form-455413-p8/assets/integration_tests
      IT_GEE_ASSET_BUCKET_NAME: pm25ml-gee-integration-tests
      GEE_SERVICE_ACCOUNT_KEY: ${{ secrets.GEE_SERVICE_ACCOUNT_KEY }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: ./.github/poetry-cache-restore
      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.GCP_PROJECT }}
          service_account: ${{ env.GOOGLE_SERVICE_ACCOUNT_NAME }}
          workload_identity_provider: ${{ env.WORKFLOW_IDENTITY_PROVIDER }}
          export_environment_variables: true
      - name: Check integration tests are marked
        run: python .ci/scripts/check_integration_marks.py
      - name: Run integration tests
        run: poetry run pytest -m "integration"
  
  mypy:
    runs-on: ubuntu-latest
    needs: [deps]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: ./.github/poetry-cache-restore
      - name: Run mypy
        run: poetry run mypy ${{ env.PROJECT_SUBDIR }}

  no-gdal-check:
    runs-on: ubuntu-latest
    needs: [deps]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: ./.github/poetry-cache-restore
      - name: Fail if GDAL is an installed dependency
        run: |
          poetry show --only ${{ env.DEVELOP_DEPENDENCY_GROUPS }} --tree | grep -q gdal && {
            echo "❌ gdal detected in installed packages!"
            exit 1
          } || echo "✅ gdal not found in dependencies."

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: astral-sh/ruff-action@v3

  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        id: "auth"
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.GCP_PROJECT }}
          service_account: ${{ env.GOOGLE_SERVICE_ACCOUNT_NAME }}
          workload_identity_provider: ${{ env.WORKFLOW_IDENTITY_PROVIDER }}
          export_environment_variables: true

      - name: Docker login Google
        run: gcloud auth configure-docker ${{ env.DOCKER_REGISTRY_ROOT }} --quiet
      
      - name: Docker login GitHub
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and deploy latest docker image
        uses: docker/build-push-action@v5
        id: build-and-deploy-image
        with:
          tags: ${{ env.IMAGE_TAG_BASE }}:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/pm25ml:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/pm25ml:cache,mode=max
          push: true

  release:
    # Release can run on workflow dispatch or on push to main. It will only
    # run if the build and test jobs are successful, unless the force input is
    # set to true. always() allows us to do conditional tests despite the needs.
    if: |
      always() &&
      (
        (github.event_name == 'workflow_dispatch' && (
          success() ||
          (github.event.inputs.force && needs.build-image.result == 'success')
        )) ||
        (github.event_name == 'push' && github.ref == 'refs/heads/main' && success())
      )

    runs-on: ubuntu-latest
    needs: [build-image, install-package, test, integration-test]
    concurrency:
      group: release
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Authenticate with Google Cloud
        id: "auth"
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.GCP_PROJECT }}
          service_account: ${{ env.GOOGLE_SERVICE_ACCOUNT_NAME }}
          workload_identity_provider: ${{ env.WORKFLOW_IDENTITY_PROVIDER }}
          export_environment_variables: true
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Tag built image as latest
        run: |
          gcloud container images add-tag \
          ${{ env.IMAGE_TAG_BASE }}:${{ github.sha }} \
          ${{ env.IMAGE_TAG_BASE }}:latest
      - name: Deploy latest job specs
        id: deploy-job-spec
        run: |
          gcloud run jobs replace infra/run.yaml
      - name: Deploy non-training workflow
        id: deploy-workflow
        run: |
          gcloud workflows deploy pm25ml-orchestrator \
            --source=infra/workflow.yaml \
            --location=europe-west1 \
            --service-account=${{ env.ORCHESTRATOR_SERVICE_ACCOUNT_NAME }} \
            --call-log-level=LOG_ALL_CALLS \
            --execution-history-level=execution-history-detailed \
            --quiet

      - name: Deploy training workflow
        id: deploy-training-workflow
        run: |
          gcloud workflows deploy pm25ml-orchestrator-with-training \
            --source=infra/workflow_with_training.yaml \
            --location=europe-west1 \
            --service-account=${{ env.ORCHESTRATOR_SERVICE_ACCOUNT_NAME }} \
            --call-log-level=LOG_ALL_CALLS \
            --execution-history-level=execution-history-detailed \
            --quiet
